{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { WeatherConditionsConstants } from \"../../shared/constants/weather-conditions.constants\";\nimport { LocationModel } from \"../model/location.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/service/shared.service\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(http, sharedService) {\n      this.http = http;\n      this.sharedService = sharedService;\n      this.locationAdding = new Subject();\n      this.locationRemoving = new Subject();\n      this.reloadingLocations = new BehaviorSubject([]);\n    }\n\n    getLocation(zipCode) {\n      this.http.get('https://api.openweathermap.org/data/2.5/weather', {\n        params: new HttpParams().set(WeatherConditionsConstants.ZIP_HTTP_PARAM, zipCode)\n      }).pipe(map(response => {\n        return this.convertResponseToLocationModel(response, zipCode);\n      })).subscribe(location => {\n        this.locationAdding.next(location);\n      }, error => {\n        this.sharedService.errorDisplaying.next(error.message);\n      });\n    }\n\n    convertResponseToLocationModel(locationResponse, zipCode) {\n      let locationModel = new LocationModel(zipCode, '');\n      let missingFields = [];\n\n      if (!locationResponse.name) {\n        missingFields.push('location name');\n      } else {\n        locationModel.locationName = locationResponse.name;\n      }\n\n      if (!locationResponse.weather || !locationResponse.weather[0] || !locationResponse.weather[0].main) {\n        missingFields.push('current weather condition');\n      } else {\n        const currentCondition = locationResponse.weather[0].main === 'Clear' ? 'Sunny' : locationResponse.weather[0].main;\n        locationModel.currentCondition = currentCondition;\n        locationModel.icon = WeatherConditionsConstants.WEATHER_ICON.hasOwnProperty(currentCondition) ? WeatherConditionsConstants.WEATHER_ICON[currentCondition] : WeatherConditionsConstants.WEATHER_ICON.NoIcon;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp) {\n        missingFields.push('current temperature');\n      } else {\n        locationModel.currentTemperature = locationResponse.main.temp;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp_max) {\n        missingFields.push('temperature max');\n      } else {\n        locationModel.maxTemperature = locationResponse.main.temp_max;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp_min) {\n        missingFields.push('temperature min');\n      } else {\n        locationModel.minTemperature = locationResponse.main.temp_min;\n      }\n\n      this.sharedService.sendErrorMessage(missingFields);\n      return locationModel;\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}