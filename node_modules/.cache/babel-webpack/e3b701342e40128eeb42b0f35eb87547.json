{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { Subject, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { environment } from \"../../../environments/environment\";\nimport { WeatherConditionsConstants } from \"../../shared/constants/weather-conditions.constants\";\nimport { LocationModel } from \"../model/location.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/service/shared.service\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(http, sharedService) {\n      this.http = http;\n      this.sharedService = sharedService;\n      this.locationAdding = new Subject();\n      this.locationRemoving = new Subject();\n    }\n\n    getLocation(zipCode) {\n      const appId = environment.appId;\n      let httpParams = new HttpParams();\n      httpParams = httpParams.append(WeatherConditionsConstants.ZIP_HTTP_PARAM, zipCode);\n      httpParams = httpParams.append(WeatherConditionsConstants.UNITS_HTTP_PARAM, WeatherConditionsConstants.METRIC);\n      httpParams = httpParams.append(WeatherConditionsConstants.APP_ID_HTTP_PARAM, appId);\n      return this.http.get('https://api.openweathermap.org/data/2.5/weather', {\n        params: httpParams\n      }).pipe(map(response => {\n        const messageError = this.checkMissingFieldsOfCurrentWeather(response);\n\n        if (!!messageError) {\n          this.sharedService.errorDisplaying.next(messageError);\n        }\n\n        const weatherConditions = !response.weather || !response.weather[0] ? [{}] : response.weather;\n\n        if (!!weatherConditions[0].main) {\n          weatherConditions[0].main = weatherConditions[0].main === 'Clear' ? 'Sunny' : weatherConditions[0].main;\n        }\n\n        const weatherTemperatures = response.main;\n        const name = response.name;\n        const currentWeather = weatherConditions[0].main;\n        const currentTemperature = !!weatherTemperatures ? weatherTemperatures.temp : undefined;\n        const maxTemperature = !!weatherTemperatures ? weatherTemperatures.temp_max : undefined;\n        const minTemperature = !!weatherTemperatures ? weatherTemperatures.temp_min : undefined;\n        const icon = WeatherConditionsConstants.WEATHER_ICON.hasOwnProperty(currentWeather) ? WeatherConditionsConstants.WEATHER_ICON[currentWeather] : WeatherConditionsConstants.WEATHER_ICON.NoIcon;\n        return new LocationModel(zipCode, name, currentWeather, currentTemperature, minTemperature, maxTemperature, icon);\n      }), catchError(err => {\n        // gerer les message proprement\n        return throwError(\"An error occurred while retrieving data\");\n      }));\n    }\n\n    checkMissingFieldsOfCurrentWeather(data) {\n      let messageError = '';\n      let fields = [];\n\n      if (!data.name) {\n        fields.push('location name');\n      }\n\n      if (!data.weather || !data.weather[0]) {\n        fields.push('current weather condition');\n      }\n\n      if (!data.main || !data.main.temp) {\n        fields.push('current temperature');\n      }\n\n      if (!data.main || !data.main.temp_max) {\n        fields.push('temperature max');\n      }\n\n      if (!data.main || !data.main.temp_min) {\n        fields.push('temperature min');\n      }\n\n      if (fields.length > 0) {\n        if (fields.length === 1) {\n          messageError = 'the following field <' + fields[0] + '> is missing';\n        } else {\n          let fieldsString = '';\n\n          for (let fieldIndex in fields) {\n            fieldsString += ' <' + fields[fieldIndex] + '> ';\n          }\n\n          messageError = 'the following fields ' + fieldsString + ' are missing';\n        }\n      }\n\n      return messageError;\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}