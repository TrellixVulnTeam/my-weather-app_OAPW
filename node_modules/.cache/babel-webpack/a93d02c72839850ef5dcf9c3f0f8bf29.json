{"ast":null,"code":"import { take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/location.service\";\nimport * as i2 from \"../shared/service/shared.service\";\nimport * as i3 from \"./add-location/add-location.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./location-item/location-item.component\";\n\nfunction LocationsComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-location-item\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const location_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"location\", location_r1);\n  }\n}\n\nexport let LocationsComponent = /*#__PURE__*/(() => {\n  class LocationsComponent {\n    constructor(locationService, sharedService) {\n      this.locationService = locationService;\n      this.sharedService = sharedService;\n      this.locations = [];\n    }\n\n    ngOnInit() {\n      this.reloadingLocationsSubscription = this.locationService.reloadingLocations.pipe(take(1)).subscribe(locations => {\n        this.locations = locations;\n      });\n      this.locationAddingSubscription = this.locationService.locationAdding.subscribe(location => {\n        const index = this.locations.findIndex(item => item.zipCode === location.zipCode);\n\n        if (index >= 0) {\n          this.locations[index] = location;\n          this.sharedService.warningDisplaying.next('The location you want to add already exists, the corresponding weather conditions have been updated');\n        } else {\n          this.locations.push(location);\n        }\n\n        localStorage.setItem('locations', JSON.stringify(this.locations.slice()));\n      });\n      this.locationRemovingSubscription = this.locationService.locationRemoving.subscribe(location => {\n        const index = this.locations.indexOf(location);\n        this.locations.splice(index, 1);\n        localStorage.setItem('locations', JSON.stringify(this.locations.slice()));\n      });\n    }\n\n    ngOnDestroy() {\n      this.reloadingLocationsSubscription.unsubscribe();\n      this.locationAddingSubscription.unsubscribe();\n      this.locationRemovingSubscription.unsubscribe();\n    }\n\n  }\n\n  LocationsComponent.ɵfac = function LocationsComponent_Factory(t) {\n    return new (t || LocationsComponent)(i0.ɵɵdirectiveInject(i1.LocationService), i0.ɵɵdirectiveInject(i2.SharedService));\n  };\n\n  LocationsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LocationsComponent,\n    selectors: [[\"app-locations\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"container-fluid\"], [4, \"ngFor\", \"ngForOf\"], [3, \"location\"]],\n    template: function LocationsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-add-location\");\n        i0.ɵɵtemplate(2, LocationsComponent_div_2_Template, 2, 1, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.locations);\n      }\n    },\n    directives: [i3.AddLocationComponent, i4.NgForOf, i5.LocationItemComponent],\n    styles: [\"\"]\n  });\n  return LocationsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}