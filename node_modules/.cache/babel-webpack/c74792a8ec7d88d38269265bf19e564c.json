{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport { WeatherConditionsConstants } from \"../../shared/constants/weather-conditions.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../shared/service/shared.service\";\nexport let LocationService = /*#__PURE__*/(() => {\n  class LocationService {\n    constructor(http, sharedService) {\n      this.http = http;\n      this.sharedService = sharedService;\n      this.locations = [];\n    }\n\n    reloadLocations() {\n      const locationsStorage = localStorage.getItem(WeatherConditionsConstants.STORAGE_KEY);\n\n      if (!!locationsStorage) {\n        this.locations = JSON.parse(locationsStorage);\n      }\n\n      ;\n      return this.locations.slice();\n    }\n\n    addNewLocation(location) {\n      const index = this.locations.findIndex(item => item.zipCode === location.zipCode);\n\n      if (index >= 0) {\n        this.locations[index] = location;\n        this.sharedService.warningDisplaying.next('The location you want to add already exists, the corresponding weather conditions have been updated');\n      } else {\n        this.locations.push(location);\n      }\n\n      ;\n      localStorage.setItem(WeatherConditionsConstants.STORAGE_KEY, JSON.stringify(this.locations.slice()));\n      return this.locations.slice();\n    }\n\n    removeLocation(index) {\n      this.locations.splice(index, 1);\n      localStorage.setItem(WeatherConditionsConstants.STORAGE_KEY, JSON.stringify(this.locations.slice()));\n      return this.locations.slice();\n    }\n\n    getLocation(zipCode) {\n      return this.http.get('https://api.openweathermap.org/data/2.5/weather', {\n        params: new HttpParams().set(WeatherConditionsConstants.ZIP_HTTP_PARAM, zipCode)\n      }).pipe(map(response => {\n        const result = this.convertResponseToLocationModel(response, zipCode);\n\n        if (result.missingFields.length > 0) {\n          this.sharedService.sendErrorMessage(result.missingFields);\n        }\n\n        return result.locationModel;\n      }));\n    }\n\n    convertResponseToLocationModel(locationResponse, zipCode) {\n      let locationModel = Object.assign({\n        zipCode: zipCode,\n        locationName: ''\n      });\n      let missingFields = [];\n\n      if (!locationResponse.name) {\n        missingFields.push('location name');\n      } else {\n        locationModel.locationName = locationResponse.name;\n      }\n\n      if (!locationResponse.weather || !locationResponse.weather[0] || !locationResponse.weather[0].main) {\n        missingFields.push('current weather condition');\n      } else {\n        const currentCondition = locationResponse.weather[0].main === WeatherConditionsConstants.RESPONSE_CONDITION_WEATHER ? WeatherConditionsConstants.EXPECTED_CONDITION_WEATHER : locationResponse.weather[0].main;\n        locationModel.currentCondition = currentCondition;\n        locationModel.icon = WeatherConditionsConstants.WEATHER_ICON.hasOwnProperty(currentCondition) ? WeatherConditionsConstants.WEATHER_ICON[currentCondition] : WeatherConditionsConstants.WEATHER_ICON.Clouds;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp) {\n        missingFields.push('current temperature');\n      } else {\n        locationModel.currentTemperature = locationResponse.main.temp;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp_max) {\n        missingFields.push('temperature max');\n      } else {\n        locationModel.maxTemperature = locationResponse.main.temp_max;\n      }\n\n      if (!locationResponse.main || !locationResponse.main.temp_min) {\n        missingFields.push('temperature min');\n      } else {\n        locationModel.minTemperature = locationResponse.main.temp_min;\n      }\n\n      return {\n        locationModel: locationModel,\n        missingFields: missingFields\n      };\n    }\n\n  }\n\n  LocationService.ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SharedService));\n  };\n\n  LocationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationService;\n})();","map":null,"metadata":{},"sourceType":"module"}